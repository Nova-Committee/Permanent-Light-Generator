buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org'}

        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'

    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "java"
apply plugin: "idea"
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'committee.nova'
version = '1.1'

java {
    archivesBaseName = 'PermanentLightGenerator-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
minecraft {

    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                plg {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                plg {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'plg', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                plg {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // The One Probe
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        // JEI, Mekanism
        name 'ModMaven'
        url 'https://modmaven.dev/'
    }
    maven {
        // location of a maven that hosts all files on CurseForge
        name 'CurseMaven'
        url 'https://www.cursemaven.com/'
    }
    maven {
        // location of latest mappings from the latest contents of the spreadsheet
        name 'Gigaherz'
        url 'https://www.dogforce-games.com/maven/'
    }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
     flatDir {
         dir 'libs'
     }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.22'
    implementation (fileTree('libs') { include '*.jar' })
    //compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    // Real mod deobf dependency examples - these get remapped to your current mappings
    //compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "plg",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
